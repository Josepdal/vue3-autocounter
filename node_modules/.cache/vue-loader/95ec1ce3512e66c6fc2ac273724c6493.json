{"remainingRequest":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/Cristopher/Documents/GitHub/vue3-autocounter/src/vue3-autocounter.vue?vue&type=template&id=6d924734","dependencies":[{"path":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/src/vue3-autocounter.vue","mtime":1614675969687},{"path":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":499162500000},{"path":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cgk8c3Bhbj57e2Rpc3BsYXllZEFtb3VudH19PC9zcGFuPgo="},{"version":3,"sources":["/Users/Cristopher/Documents/GitHub/vue3-autocounter/src/vue3-autocounter.vue"],"names":[],"mappings":";CACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/Users/Cristopher/Documents/GitHub/vue3-autocounter/src/vue3-autocounter.vue","sourceRoot":"","sourcesContent":["<template>\n\t<span>{{displayedAmount}}</span>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\ninterface Data {\n  timestamp: number,\n  startTimestamp: number,\n  currentStartAmount: number,\n  currentAmount: number,\n  currentDuration: number,\n  paused: boolean,\n  remaining: number,\n  animationFrame: string\n}\n\nexport default defineComponent({\n\tname: \"Vue3Autocounter\",\n  interval: null,\n  props: {\n    startAmount: {\n      type: Number,\n      default: 0\n    },\n    endAmount: {\n      type: Number,\n      default: 0,\n      required: true\n    },\n    duration: {\n      type: Number,\n      default: 1000\n    },\n    autoinit: {\n      type: Boolean,\n      default: true\n    },\n    prefix: {\n      type: String,\n      default: ''\n    },\n    suffix: {\n      type: String,\n      default: ''\n    },\n    separator: {\n      type: String,\n      default: ','\n    },\n    decimal: {\n      type: String,\n      default: '.'\n    },\n    decimals: {\n      type: Number,\n      default: 0,\n      validator(decimals: number): boolean {\n        return decimals >= 0;\n      }\n    }\n  },\n\tdata(): Data {\n\t\treturn {\n      timestamp: null,\n      startTimestamp: null,\n\t\t\tcurrentAmount: 0,\n      currentStartAmount: 0,\n      currentDuration: 0,\n      paused: false,\n      remaining: null,\n      animationFrame: null\n\t\t};\n\t},\n  mounted (): void {\n    this.currentAmount = this.startAmount;\n    this.currentStartAmount = this.startAmount;\n    this.currentDuration = this.duration;\n    this.remaining = this.duration;\n    if (this.autoinit) this.start();\n    else this.paused = true;\n    this.$emit('mounted');\n  },\n  unmounted(): void {\n    if (this.animationFrame) window.cancelAnimationFrame(this.animationFrame)\n  },\n  watch: {\n    startAmount(): void {\n      this.reset();\n    },\n    endAmount(): void {\n      this.reset();\n    }\n  },\n  computed: {\n    isCountingUp(): boolean {\n      return this.endAmount > this.startAmount;\n    },\n    displayedAmount(): string {\n      return `${this.prefix}${this.formatedAmount}${this.suffix}`;\n    },\n    formatedAmount(): string {\n      const regex = /(\\d+)(\\d{3})/;\n\n      let numberString: string = this.currentAmount.toFixed(this.decimals);\n      numberString += '';\n      let numberArray:Array<string> = numberString.split('.');\n      let numbers: string = numberArray[0];\n      let decimals: string = numberArray.length > 1 ? this.decimal + numberArray[1] : '';\n      let isNumber = !isNaN(parseFloat(this.separator));\n\n      if (this.separator && !isNumber) {\n        while (regex.test(numbers)) numbers = numbers.replace(regex, '$1' + this.separator + '$2');\n      }\n      \n      return this.prefix + numbers + decimals + this.suffix;\n    }\n  },\n\tmethods: {\n    start(): void {\n      this.currentStartAmount = this.startAmount;\n      this.startTimestamp = null;\n      this.currentDuration = this.duration;\n      this.paused = false;\n      this.animationFrame = window.requestAnimationFrame(this.counting);\n    },\n    pause(): void {\n      if (this.paused) return;\n      if (this.animationFrame) window.cancelAnimationFrame(this.animationFrame);\n      this.paused = true;\n    },\n    resume(): void {\n      if (!this.paused) return;\n      this.startTimestamp = null;\n      this.currentDuration = +this.remaining;\n      this.currentStartAmount = +this.currentAmount;\n      this.animationFrame = window.requestAnimationFrame(this.counting);\n      this.paused = false;\n    },\n    reset(): void {\n      this.paused = false;\n      this.startTimestamp = null;\n      if (this.animationFrame) window.cancelAnimationFrame(this.animationFrame);\n      this.currentAmount = this.startAmount;\n      if (this.autoinit) this.start();\n      else this.paused = true;\n    },\n    counting(timestamp: number): void {\n      this.timestamp = timestamp;\n      if (!this.startTimestamp) this.startTimestamp = timestamp;\n      let progress: number = timestamp - this.startTimestamp;\n      this.remaining = this.currentDuration - progress;\n      \n      if (!this.isCountingUp) {\n        this.currentAmount = this.currentStartAmount - ((this.currentStartAmount - this.endAmount) * (progress / this.currentDuration));\n        this.currentAmount = this.currentAmount < this.endAmount ? this.endAmount : this.currentAmount;\n      } else {\n        this.currentAmount = this.currentStartAmount + (this.endAmount - this.currentStartAmount) * (progress / this.currentDuration);\n        this.currentAmount = this.currentAmount > this.endAmount ? this.endAmount : this.currentAmount;\n      }\n\n      if (progress < this.currentDuration) this.animationFrame = window.requestAnimationFrame(this.counting);\n      else this.$emit('finished');\n\t\t}\n  }\n});\n</script>\n"]}]}